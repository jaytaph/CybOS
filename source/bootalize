#!/bin/sh

# This will create a CYBOS (fat12) boot image. Mind that the sectors we need to
# load BOOTLVL2.BIN are hardcoded in BOOTLVL1.BIN. As soon as the actual bootalize
# program works, we can detect which sectors we need to load by looking in the
# FAT12 structure.
#

# Create zero filled 1MB image
dd if=/dev/zero of=../binary/image/fdd.img bs=512 count=2880

# Format it to FAT12
#mkdosfs -n CYBOS -F 12 -R 2 -s 1 -S 512 -f 2 -h 0 -r 224 ../binary/image/fdd.img
mkdosfs -n CYBOS -F 12 ../binary/image/fdd.img

# Add boot sector to start of image (we overwrite BPB!)
dd if=../binary/boot/bootlvl1.bin of=../binary/image/fdd.img bs=512 seek=0 conv=notrunc

mmd -i ../binary/image/fdd.img SYSTEM
mcopy -i ../binary/image/fdd.img ../binary/boot/bootlvl1.bin ::/SYSTEM/BOOTLVL1.BIN
mcopy -i ../binary/image/fdd.img ../binary/boot/bootlvl2.bin ::/SYSTEM/BOOTLVL2.BIN
mcopy -i ../binary/image/fdd.img ../binary/kernel/cybos32.bin ::/SYSTEM/CYBOS32.BIN
mcopy -i ../binary/image/fdd.img ../binary/apps/init.bin ::/SYSTEM/INIT.BIN
mdir -i ../binary/image/fdd.img ::/
mdir -i ../binary/image/fdd.img ::/SYSTEM



## Mount image
#if [ ! -d /tmp/fat12mnt ] ; then
#  mkdir /tmp/fat12mnt
#fi
#
#sudo mount -o loop ../binary/image/fdd.img /tmp/fat12mnt
#
## Create directory layout
#mkdir -p /tmp/fat12mnt/SYSTEM/BIN
#mkdir -p /tmp/fat12mnt/APPS
#mkdir -p /tmp/fat12mnt/DOCS
#
## Make items in image
#cp ../binary/boot/bootlvl1.bin /tmp/fat12mnt/SYSTEM/BOOTLVL1.BIN
#cp ../binary/boot/bootlvl2.bin /tmp/fat12mnt/SYSTEM/BOOTLVL2.BIN
#cp ../binary/kernel/cybos32.bin /tmp/fat12mnt/SYSTEM/CYBOS32.BIN
#cp ../binary/apps/init.bin /tmp/fat12mnt/SYSTEM/INIT.BIN
#
## Dummy items
#touch /tmp/fat12mnt/SYSTEM/BIN/MC.BIN
#touch /tmp/fat12mnt/APPS/MC.BIN
#touch /tmp/fat12mnt/APPS/MC.BIN
#
## A document
#echo "Hello world" > /tmp/fat12mnt/DOCS/DOCUMENT.TXT
#
## Unmount
#umount /tmp/fat12mnt


